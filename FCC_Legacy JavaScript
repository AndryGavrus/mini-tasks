/^ ^\
\* */
|>•<|
11111111ю
// 28.11.2023
// Initializing Variables with the Assignment Operator
   var a=9;

// Declare String Variables
  var myFirstName= 'GA';
  var myLastName= 'AN';

// Understanding Uninitialized Variables
  var a=5;
  var b=10;
  var c= "I am a";
   a = a + 1;
   b = b + 5;
   c = c + " String!!!";

// Case Sensitivity in Variables
  // Variable declarations
  var studlyCapVar;
  var properCamelCase;
  var titleCaseOver;
// Variable assignments
  studlyCapVar = 10;
  properCamelCase = "A String";
  titleCaseOver = 9000;

// 29.11.2023
// Explore Differences Between the var and let Keywords
  let catName = "Oliver";
  let catSound = "Meow!";
// Unlike var, when you use let, a variable with the same name can only be declared once.

// Declare a Read-Only Variable with the const Keyword
  const FCC = "freeCodeCamp"; // Change this line
  let fact = "is cool!!!"; // Change this line
  fact = "is awesome!!!";
  console.log(FCC, fact); // Change this line
  // t is common for developers to use uppercase variable identifiers for 
  immutable values and lowercase or camelCase for mutable values (objects and arrays).

// Add Two Numbers with JavaScript
  const sum = 10 + 10;

// Subtract One Number from Another with JavaScript
  const difference = 45 - 33;

// Multiply Two Numbers with JavaScript
  const product = 8 * 10;

//  Divide One Number by Another with JavaScript
  const quotient = 66 / 33;

// Increment a Number with JavaScript
let myVar = 87;
myVar++;

// Decrement a Number with JavaScript
let myVar = 11;
myVar--;

// 30.11.2023
// Create Decimal Numbers with JavaScript
  const myDecimal = 5.7;

// Multiply Two Decimals with JavaScript
  const product = 2.0 * 2.5;

// Divide One Decimal by Another with JavaScript	
  const quotient = 4.4 / 2.0;

// Finding a Remainder in JavaScript
const remainder = 11 % 3;

// Compound Assignment With Augmented Addition	
let a = 3;
let b = 17;
let c = 12;
  a += 12;
  b += 9;
  c += 7;

// Compound Assignment With Augmented Subtraction	
let a = 11;
let b = 9;
let c = 3;
  a -= 6;
  b -= 15;
  c -= 1;

// Compound Assignment With Augmented Multiplication
let a = 5;
let b = 12;
let c = 4.6;
  a *= 5;
  b *= 3;
  c *= 10;

// Compound Assignment With Augmented Division	
let a = 48;
let b = 108;
let c = 33;
  a /= 12;
  b /= 4;
  c /= 11;

// Escaping Literal Quotes in Strings
const myStr = "I am a \"double quoted\" string inside \"double quotes\".";

// Quoting Strings with Single Quotes
  const myStr = '<a href="http://www.example.com" target="_blank">Link</a>';

// 01.12.2023
// Escape Sequences in Strings
  const myStr = "FirstLine\n\t\\SecondLine\nThirdLine";
/* Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\t	tab
\r	carriage return
\b	backspace
\f	form feed */

// Concatenating Strings with Plus Operator
const myStr = "This is the start. "+"This is the end.";

// Concatenating Strings with the Plus Equals Operator
  let myStr = "This is the first sentence. ";
  myStr += "This is the second sentence.";

// Constructing Strings with Variables
const myName = "ANDY";
const myStr = "My name is " + myName + " and I am well!";

// Appending Variables to Strings
const someAdjective = "awesome!";
let myStr = "Learning to code is ";
myStr += someAdjective;

// 02.12.2023
// Find the Length of a String
  // Setup
  let lastNameLength = 0;
  const lastName = "Lovelace";

// Only change code below this line
lastNameLength = lastName.length;

// Use Bracket Notation to Find the First Character in a String
  let firstLetterOfLastName = "";
  const lastName = "Lovelace";
  firstLetterOfLastName = lastName[0];

// Understand String Immutability
  let myStr = "Jello World";
  myStr = "Hello World"; 

// Use Bracket Notation to Find the Nth Character in a String
const lastName = "Lovelace";
const thirdLetterOfLastName = lastName[2]; 

// Use Bracket Notation to Find the Last Character in a String
  const lastName = "Lovelace";
  const lastLetterOfLastName = lastName[lastName.length-1];

// Use Bracket Notation to Find the Nth-to-Last Character in a String
const lastName = "Lovelace";
const secondToLastLetterOfLastName = lastName[lastName.length - 2]; 

// 03.12.2023
// Word Blanks
const myNoun = "dog";
const myAdjective = "big";
const myVerb = "ran";
const myAdverb = "quickly";
const wordBlanks = myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb;

// Store Multiple Values in one Variable using JavaScript Arrays
const myArray = ["my", 21];

// Nest one Array within Another Array
const myArray = [["Bulls", 23], ["White Sox", 45]];

// Access Array Data with Indexes
const myArray = [50, 60, 70];
const myData = myArray[0];

// Modify Array Data With Indexes
const myArray = [18, 64, 99];
myArray[0] = [45];

// 04.12.2023
// Access Multi-Dimensional Arrays With Indexes
const myArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14],
];
const myData = myArray[2][1];

// Manipulate Arrays With push Method
const myArray = [["John", 23], ["cat", 2]];
myArray.push (["dog", 3]);

// Manipulate Arrays With pop Method
const myArray = [["John", 23], ["cat", 2]];
const removedFromMyArray = myArray.pop();

// Manipulate Arrays With shift Method
const myArray = [["John", 23], ["dog", 3]];
const removedFromMyArray = myArray.shift ();

// Manipulate Arrays With unshift Method
const myArray = [["John", 23], ["dog", 3]];
myArray.shift();
myArray.unshift(["Paul", 35]);

// Shopping List
const myList = [
  ["Chocolate Bar", 15],
  ["Chocolate ", 10],
  ["Banana", 25],
  ["Jam", 12],
  ["Fish", 41]
];

// Write Reusable JavaScript with Functions
function reusableFunction() {
  console.log("Hi World");
}
reusableFunction();

// Passing Values to Functions with Arguments
function functionWithArgs(x, y){
  console.log(x+y);
}
functionWithArgs(1,105);

// Return a Value from a Function with Return
function timesFive(num) {
  return num * 5;
}
const answer = timesFive(5);

// Global Scope and Functions
  // Declare the myGlobal variable below this line
let myGlobal = 10;
function fun1() {
  // Assign 5 to oopsGlobal here
oopsGlobal = 5;
}
  // Only change code above this line
function fun2() {
  let output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}

// 05.12.2023
// Local Scope and Functions
function myLocalScope() {
  // Only change code below this line
const myVar = 'mine'
  console.log('inside myLocalScope', myVar);
}
myLocalScope();
  // Run and check the console
  // myVar is not defined outside of myLocalScope
console.log('outside myLocalScope', myVar);

// Global vs. Local Scope in Functions
  const outerWear = "T-Shirt";
function myOutfit() {
 const outerWear = "sweater";
    return outerWear;
}
myOutfit();

// Understanding Undefined Value returned from a Function
  // Setup
let sum = 0;
function addThree() {
  sum = sum + 3;
}
  // Only change code below this line
function addFive() {
  sum = sum + 5;
}
  // Only change code above this line
addThree();
addFive();

// Assignment with a Returned Value
  // Setup
let processed = 0;
function processArg(num) {
  return (num + 3) / 5;
}
processed = processArg(7);

// Stand in Line
function nextInLine(arr, item) {
  // Only change code below this line
  arr.push(item);
   const removed = arr.shift();
  return removed;
  // Only change code above this line
}
  // Setup
let testArr = [1, 2, 3, 4, 5];

// Understanding Boolean Values
unction welcomeToBooleans() {
  return true; // Change this line
}

//06.12.2023
// Use Conditional Logic with If Statements
  function trueOrFalse(wasThatTrue) {
 if (wasThatTrue) {
    return "Yes, that was true";
  }
  return "No, that was false";
  }

// Comparison with the Equality Operator
  function testEqual(val) {
  if (val == 12) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Comparison with the Strict Equality Operator
  function testStrict(val) {
  if (val === 7) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Practice comparing different values
  unction compareEquality(a, b) {
  if (a === b) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Comparison with the Inequality Operator
  function testNotEqual(val) {
  if (val != 99) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

// Comparison with the Strict Inequality Operator
  function testStrictNotEqual(val) {
  if (val !== 17) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

// Comparison with the Greater Than Operator
  function testGreaterThan(val) {
  if (val > 100) {  // Change this line
    return "Over 100";
  }
  if (val > 10) {  // Change this line
    return "Over 10";
  }
  return "10 or Under";
}

// Comparison with the Greater Than Or Equal To Operator
  function testGreaterOrEqual(val) {
  if (val >= 20) {  // Change this line
    return "20 or Over";
  }
  if (val >= 10) {  // Change this line
    return "10 or Over";
  }
  return "Less than 10";
}

// Comparison with the Less Than Operator
  function testLessThan(val) {
  if (val < 25) {  // Change this line
    return "Under 25";
  }
  if (val < 55) {  // Change this line
    return "Under 55";
  }
  return "55 or Over";
}

// Comparison with the Less Than Or Equal To Operator
  function testLessOrEqual(val) {
  if (val <= 12) {  // Change this line
    return "Smaller Than or Equal to 12";
  }
  if (val <= 24) {  // Change this line
    return "Smaller Than or Equal to 24";
  }
  return "More Than 24";
}

// Comparisons with the Logical And Operator
  function testLogicalAnd(val) {
   if (val >= 25 && val <=50) {
         return "Yes";
    }
     return "No";
}
// Comparisons with the Logical Or Operator
  function testLogicalOr(val) {
    if (val > 20 || val < 10) {
    return "Outside";
  }
   return "Inside";
}

// 07.12.2023
// Introducing Else Statements
  unction testElse(val) {
  let result = "";
   if (val > 5) {
    result = "Bigger than 5";
  } else {
    result = "5 or Smaller";
  }
  return result;
}

// Introducing Else If Statements
  function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  } else if (val < 5) {
    return "Smaller than 5";
  } else{
    return "Between 5 and 10";
  }
}

// Logical Order in If Else Statements
  function orderMyLogic(val) {
  if (val < 5) {
  return "Less than 5"; 
  } else if (val < 10) {
    return "Less than 10";
      } else {
    return "Greater than or equal to 10";
  }
}

// Chaining If Else Statements
  function testSize(num) {
     if (num < 5) {
  return "Tiny"; 
  } else if (num < 10) {
    return "Small";
      } else if (num < 15) {
    return "Medium";
      } else if (num < 20) {
    return "Large";
       } else {
    return "Huge";
  }
}

// Golf Code
  const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
function golfScore(par, strokes) {
  // Only change code below this line
  if (strokes == 1) {
    return names[0];
  } else if (strokes <= par - 2) {
    return names[1];
  } else if (strokes === par - 1) {
    return names[2];
  } else if (strokes === par) {
    return names[3];
  } else if (strokes === par + 1) {
    return names[4];
  } else if (strokes === par + 2) {
    return names[5];
  } else {
    return names[6];
  }
  // Only change code above this line
}

// 08.12.2023
// Selecting from Many Options with Switch Statements
  function caseInSwitch(val) {
  let answer = "";
  switch (val) {
    case 1:
    answer = 'alpha';
     break;
    case 2:
    answer = 'beta';
     break;
    case 3:
    answer = 'gamma';
     break;
    case 4:
    answer = 'delta';
    break;
  }
  return answer;
}

// Adding a Default Option in Switch Statements
  function switchOfStuff(val) {
  let answer = "";
    switch (val) {
    case 'a':
    answer = 'apple';
     break;
    case 'b':
    answer = 'bird';
     break;
    case 'c':
    answer = 'cat';
     break;
    default:
    answer = 'stuff';
       }
    return answer;
}

// Multiple Identical Options in Switch Statements
  function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
  switch (val) {
  case 1:
  case 2:
  case 3:
    answer = "Low";
    break;
  case 4:
  case 5:
  case 6:
    answer = "Mid";
    break;
  case 7:
  case 8:
  case 9:
    answer = "High";
    break;
  }
  return answer;
}

// Replacing If Else Chains with Switch
  function chainToSwitch(val) {
  let answer = "";
   switch (val) {
    case "bob":
    answer = "Marley";
    break;
    case 42:
    answer = "The Answer";
    break;
    case 1:
    answer = "There is no #1";
    break;
    case 99:
    answer = "Missed me by this much!";
    break;
    case 7:
    answer = "Ate Nine";
    break;
  }
    return answer;
}

// Returning Boolean Values from Functions
  function isLess(a, b) {
      return a < b;
  }

// Return Early Pattern for Functions
  function abTest(a, b) {
  // Only change code below this line
  if (a < 0 || b < 0) {
  return undefined;
}

// Counting Cards
  let count = 0;

function cc(card) {
  // Only change code below this line
    switch (card) {
    case 2:
    case 3: 
    case 4:
    case 5:
    case 6:
    count = count + 1;
    break;
    case 7:
    case 8:
    case 9:
    count = count + 0;
    break;
    case 10:
    case 'J':
    case 'Q':
    case 'K':
    case 'A':
    count = count -1;
    break;}
       if (count > 0) {
    return count + " Bet";
  } else {
    return count + " Hold";
  }
 }

// 09.12.2023
// Build JavaScript Objects
  const myDog = {
   "name": "Gav-Gav",
  "legs": 4,
  "tails": 1,
  "friends": ["People", "Dogs"]
 };

// Accessing Object Properties with Dot Notation
  const testObj = {
  hat: "ballcap",
  shirt: "jersey",
  shoes: "cleats"
};
const hatValue = testObj.hat;     
const shirtValue = testObj.shirt;

// Accessing Object Properties with Bracket Notation
  const testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};
const entreeValue = testObj["an entree"];  
const drinkValue = testObj["the drink"];

// 10.12.2023
// Accessing Object Properties with Variables
  const testObj = {
  12: "Namath",
  16: "Montana",
  19: "Unitas"
};
const playerNumber = 16;  
const player = testObj[playerNumber];

// 11.12.2023
// Updating Object Properties
  const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
  myDog.name = 'Happy Coder';

// Add New Properties to a JavaScript Object
  const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog.bark = 'woof';

// Delete Properties from a JavaScript Object
  const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};
delete myDog.tails;

// Using Objects for Lookups
  function phoneticLookup(val) {
  let result = "";
  var lookup = {
    "alpha": "Adams",
    "bravo": "Boston",
    "charlie": "Chicago",
    "delta": "Denver",
    "echo": "Easy",
    "foxtrot": "Frank"
  };
  result = lookup[val];
  return result;
}

// Testing Objects for Properties
  function checkObj(obj, checkProp) {
  // Only change code below this line
 if (obj.hasOwnProperty(checkProp)){
   return obj[checkProp];
 } else {
   return 'Not Found';
 }
}

// Manipulating Complex Objects
  const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  }, 
  {
   "artist": "Daft Punk",
    "title": "Homework",
    "release_year": 1997,
    "formats": [ 
      "CD", 
      "Cassette", 
      "LP"
    ] 
  }
];

// Accessing Nested Objects
  const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};
const gloveBoxContents = myStorage.car.inside['glove box'];

// 12.12.2023
// Accessing Nested Arrays
  const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];
const secondTree = myPlants[1].list[1];

// Record Collection
  // Setup
const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  if (value === "") {
    delete records[id][prop];
  } else if (prop !== "tracks" && value !== "") {
    records[id][prop] = value;
  } else if (prop === "tracks" && value !== "") {
    if (records[id].hasOwnProperty("tracks") === false) {
      records[id][prop] = [];
    }
    records[id][prop].push(value);
  }
  return records;
}

// Iterate with JavaScript While Loops
  const myArray = [];
let i = 5;
while (i >= 0) {
  myArray.push(i);
  i--;
}

// Iterate with JavaScript For Loops
  const myArray = [];
for (let i = 1; i <=5; i++) {
  myArray.push(i);
}

// Iterate Odd Numbers With a For Loop
  const myArray = [];
for (let i = 1; i <= 9; i += 2) {
 myArray.push(i);
}

// Count Backwards With a For Loop
  const myArray = [];
for (let i = 9; i > 0; i -= 2) {
  myArray.push(i);
}

// 13.12.2023
// Iterate Through an Array with a For Loop
  const myArr = [2, 3, 4, 5, 6];
var total = 0;
for (let i = 0; i < myArr.length; i++) {
   total+=myArr[i];
}

// 14.12.2023
// Nesting For Loops
  function multiplyAll(arr) {
  let product = 1;
  for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
  product *= arr[i][j];}
  }
   return product;
}

// Iterate with JavaScript Do...While Loops
const myArray = [];
let i = 10;
do {
  myArray.push(i);
  i++;
  } while (i < 10);
while (i < 5) {
  myArray.push(i);
  i++;
}

// 15.12.2023
// Replace Loops using Recursion
  function sum(arr, n) {
    if (n <= 0) {
      return 0;
    } else {
      return sum(arr, n - 1) + arr[n - 1];
    }
  }

// Profile Lookup
  const contacts = [
  {
    firstName: "Akira",
    lastName: "Laine",
    number: "0543236543",
    likes: ["Pizza", "Coding", "Brownie Points"],
  },
  {
    firstName: "Harry",
    lastName: "Potter",
    number: "0994372684",
    likes: ["Hogwarts", "Magic", "Hagrid"],
  },
  {
    firstName: "Sherlock",
    lastName: "Holmes",
    number: "0487345643",
    likes: ["Intriguing Cases", "Violin"],
  },
  {
    firstName: "Kristian",
    lastName: "Vos",
    number: "unknown",
    likes: ["JavaScript", "Gaming", "Foxes"],
  },
];
function lookUpProfile(name, prop) {
    for (let x = 0; x < contacts.length; x++) {
    if (contacts[x].firstName === name) {
      if (contacts[x].hasOwnProperty(prop)) {
        return contacts[x][prop];
      } else {
        return "No such property";
      }
    }
  }
  return "No such contact";
  }

// Generate Random Fractions with JavaScript
  function randomFraction() {
  return Math.random();
}

// Generate Random Whole Numbers with JavaScript
  function randomWholeNum() {
  return Math.floor(Math.random() * 10);
}

// Generate Random Whole Numbers within a Range
  function randomRange(myMin, myMax) {
  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
}

// Use the parseInt Function
  function convertToInteger(str) {
var a = parseInt (str);
return a;
}

// 16.12.2023
// Use the parseInt Function with a Radix
  function convertToInteger(str) {
  const a = parseInt(str, 2);
  return a;
}

// Use the Conditional (Ternary) Operator
  function checkEqual(a, b) {
return a == b ? 'Equal' : 'Not Equal';
}

// Use Multiple Conditional (Ternary) Operators
  function checkSign(num) {
return (num > 0) ? "positive" 
    : (num == 0) ? "zero" 
    : "negative";
}

// Use Recursion to Create a Countdown
  function countdown(n){
  if (n < 1) {
    return [];
  } else {
    const countArray = countdown(n - 1);
    countArray.unshift(n);
    return countArray;
  }
}

// Use Recursion to Create a Range of Numbers
  function rangeOfNumbers(startNum, endNum) {
   if (endNum < startNum) {
    return [];
  } else {
    const numbers = rangeOfNumbers(startNum, endNum - 1);
    numbers.push(endNum);
    return numbers;
  }
};

// 17.12.2023
// ES6
// Compare Scopes of the var and let Keywords
  function checkScope() {
  let i = 'function scope';
  if (true) {
    let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}

// Mutate an Array Declared with const
  const s = [5, 7, 2];
function editInPlace() {
   s[0] = 2;
  s[1] = 5;
  s[2] = 7;
  return s;
 }

// 18.12.2023
// Prevent Object Mutation
  function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  Object.freeze(MATH_CONSTANTS);
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();

// Use Arrow Functions to Write Concise Anonymous Functions
  const magic = () => new Date();

// Write Arrow Functions with Parameters
  const myConcat = (arr1, arr2) => arr1.concat(arr2);

// 19.12.2023
// Set Default Parameters for Your Functions
  const increment = (number, value = 1) => number + value;

// Use the Rest Parameter with Function Parameters
  const sum = (...args) => {
   let total = 0;
  for (let i = 0; i < args.length; i++) {
    total += args[i];
  }
  return total;
}

// Use the Spread Operator to Evaluate Arrays In-Place
  const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
arr2  = [...arr1];  
console.log(arr2);

// Use Destructuring Assignment to Extract Values from Objects
  const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};
const {today, tomorrow} = HIGH_TEMPERATURES;

// 20.12.2023
// Use Destructuring Assignment to Assign Variables from Objects
  const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};
const {today: highToday,tomorrow: highTomorrow } = HIGH_TEMPERATURES;

// Use Destructuring Assignment to Assign Variables from Nested Objects
  const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};
const { today: { low: lowToday, high: highToday } } = LOCAL_FORECAST;

// 21.12.2023
// Use Destructuring Assignment to Assign Variables from Arrays
  let a = 8, b = 6;
  [a, b] = [b, a];

// Destructuring via rest elements
  function removeFirstTwo(list) {
  const [a, b, ...arr] = list;
  return arr;
}

// Use Destructuring Assignment to Pass an Object as a Function's Parameters
  const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};
const half = ({ max, min }) => (max + min) / 2.0;

// 22.12.2023
// Create Strings using Template Literals
  const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr) {
   const failureItems = [];
  for (let i = 0; i < arr.length; i++) {
    failureItems.push(`<li class="text-warning">${arr[i]}</li>`);
  }
    return failureItems;
}

//23.12.2023
// Write Concise Object Literal Declarations Using Object Property Shorthand
  const createPerson = (name, age, gender) => {
   return ({ name, age, gender});
  };

// 24.12.2023
// Write Concise Declarative Functions with ES6
  const bicycle = {
  gear: 2,
  setGear (newGear) {
    this.gear = newGear;
  }
};

// 25.12.2023
// Use class Syntax to Define a Constructor Function
  class Vegetable {
  constructor(name) {
    this.name = name;
  }
}

// 26.12.2023
// Use getters and setters to Control Access to an Object
  class Thermostat {
  constructor(fahrenheit) {
    this._fahrenheit = fahrenheit;
  }
    get temperature() {
    return (5 / 9) * (this._fahrenheit - 32);
  }
    set temperature(celsius) {
    return this._fahrenheit = (celsius * 9.0) / 5 + 32;
  }
}

// 27-28.12.2023
// Create a Module Script
  <html>
  <body>
      <script type="module" src="index.js"></script>
  </body>
</html>

// 12.01.2024
// Use export to Share a Code Block
  const uppercaseString = (string) => {
  return string.toUpperCase();
}
const lowercaseString = (string) => {
  return string.toLowerCase()
}
export {uppercaseString, lowercaseString}

// Reuse JavaScript Code Using import
  import { uppercaseString, lowercaseString } from './string_functions.js';
  uppercaseString("hello");
  lowercaseString("WORLD!");

// Use * to Import Everything from a File
  import * as stringFunctions from './string_functions.js'
  stringFunctions.uppercaseString("hello");
  stringFunctions.lowercaseString("WORLD!");

// 13.01.2024
// Create an Export Fallback with export default
  export default function subtract(x, y) {
  return x - y;
}

// Import a Default Export
  import subtract from "./math_functions.js"
  subtract(7,4);

// 15.01.2024
// Create a JavaScript Promise
  const makeServerRequest = new Promise((resolve, reject) => {
  
  });  
// Complete a Promise with resolve and reject
  const makeServerRequest = new Promise((resolve, reject) => {
  let responseFromServer;
     if(responseFromServer) {
    resolve ("We got the data");
  } else {  
    reject ("Data not received");
  }
});

// 16.01.2024
// Handle a Fulfilled Promise with then
  const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to true to represent a successful response from a server
  let responseFromServer = true;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});
makeServerRequest.then(result => {
  console.log(result);
});

// Handle a Rejected Promise with catch
  const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});
  makeServerRequest.then(result => {
    console.log(result);
  });
  makeServerRequest.catch(error => {
    console.log(error);
  });

// 28.01.2024
// Using the Test Method
  let myString = "Hello, World!";
  let myRegex = /Hello/;
  let result = myRegex.test(myString); 

// Match Literal Strings
  let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
  let waldoRegex = /Waldo/; 
  let result = waldoRegex.test(waldoIsHiding);

// Match a Literal String with Different Possibilities
  let petString = "James has a pet cat.";
  let petRegex = /dog|cat|bird|fish/;
  let result = petRegex.test(petString);

// 29.01.2024
// Ignore Case While Matching
  let myString = "freeCodeCamp";
  let fccRegex = /freecodecamp/i; 
  let result = fccRegex.test(myString);

// Extract Matches
  let extractStr = "Extract the word 'coding' from this string.";
  let codingRegex = /coding/; 
  let result = extractStr.match(codingRegex);

// 05.02.2024
// Find More Than the First Match
  let twinkleStar = "Twinkle, twinkle, little star";
  let starRegex = /Twinkle/gi; 
  let result = twinkleStar.match(starRegex);
  
// Match Anything with Wildcard Period
  let exampleStr = "Let's have fun with regular expressions!";
  let unRegex = /.un/;
  let result = unRegex.test(exampleStr);

// Match Single Character with Multiple Possibilities
  let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
  let vowelRegex = /[aeiou]/gi; 
  let result = quoteSample.match(vowelRegex); 

// 09.02.2024
// Match Letters of the Alphabet
  let quoteSample = "The quick brown fox jumps over the lazy dog.";
  let alphabetRegex = /[a-z]/gi; 
  let result = quoteSample.match(alphabetRegex); 

// Match Numbers and Letters of the Alphabet
  let quoteSample = "Blueberry 3.141592653s are delicious.";
  let myRegex = /[h-s2-6]/ig; 
  let result = quoteSample.match(myRegex); 

// Match Single Characters Not Specified
  let quoteSample = "3 blind mice.";
  let myRegex = /[^aeiou0-9]/gi; 
  let result = quoteSample.match(myRegex);

// 11.02.2024
// Match Characters that Occur One or More Times
  let difficultSpelling = "Mississippi";
  let myRegex = /s+/g; 
  let result = difficultSpelling.match(myRegex);

// 12.02.2024
// Match Characters that Occur Zero or More Times
  let chewieRegex = /Aa*/; 
  let result = chewieQuote.match(chewieRegex);

// Find Characters with Lazy Matching
  let text = "<h1>Winter is coming</h1>";
  let myRegex = /<.*?>/; 
  let result = text.match(myRegex);

// Find One or More Criminals in a Hunt
  let reCriminals = /C+/;

// 13.02.2024
// Match Beginning String Patterns
  let rickyAndCal = "Cal and Ricky both like racing.";
  let calRegex = /^Cal/; 
  let result = calRegex.test(rickyAndCal);

// Match Ending String Patterns
  let caboose = "The last car on a train is the caboose";
  let lastRegex = /caboose$/; 
  let result = lastRegex.test(caboose);

// Match All Letters and Numbers
  let quoteSample = "The five boxing wizards jump quickly.";
  let alphabetRegexV2 = /\w/g; 
  let result = quoteSample.match(alphabetRegexV2).length;

// Match Everything But Letters and Numbers
  let quoteSample = "The five boxing wizards jump quickly.";
  let nonAlphabetRegex = /\W/g; 
  let result = quoteSample.match(nonAlphabetRegex).length;

// Match All Numbers
  let movieName = "2001: A Space Odyssey";
  let numRegex = /\d/g; 
  let result = movieName.match(numRegex).length;

// Match All Non-Numbers
  let movieName = "2001: A Space Odyssey";
  let noNumRegex = /\D/g; 
  let result = movieName.match(noNumRegex).length;

// 14.02.2024
// Restrict Possible Usernames
  let username = "JackOfAllTrades";
  let userCheck = /^[a-z][a-z]+\d*$|^[a-z]\d\d+$/i; 
  let result = userCheck.test(username);

// Match Whitespace
  let sample = "Whitespace is important in separating words";
  let countWhiteSpace = /\s/g; 
  let result = sample.match(countWhiteSpace);

// Match Non-Whitespace Characters
  let sample = "Whitespace is important in separating words";
  let countNonWhiteSpace = /\S/g; 
  let result = sample.match(countNonWhiteSpace);

// 16.02.2024
// Specify Upper and Lower Number of Matches
  let ohStr = "Ohhh no";
  let ohRegex = /Oh{3,6}\sno/; 
  let result = ohRegex.test(ohStr);

// Specify Only the Lower Number of Matches
  let haStr = "Hazzzzah";
  let haRegex = /Haz{4,}ah/; 
  let result = haRegex.test(haStr);

// Specify Exact Number of Matches
  let timStr = "Timmmmber";
  let timRegex = /Tim{4}ber/; 
  let result = timRegex.test(timStr);

// Check for All or None
  let favWord = "favorite";
  let favRegex = /favou?rite/; 
  let result = favRegex.test(favWord);

// 19.02.2024
// Positive and Negative Lookahead
  let sampleWord = "astronaut";
  let pwRegex = /(?=\w{6})(?=\w*\d{2})/; 
  let result = pwRegex.test(sampleWord);

// Check For Mixed Grouping of Characters
  let myString = "Eleanor Roosevelt";
  let myRegex = /(Franklin|Eleanor) (([A-Z]\.?|[A-Z][a-z]+) )?Roosevelt/;
  let result = myRegex.test(myString);

// 21.02.2024
// Reuse Patterns Using Capture Groups
  let repeatNum = "42 42 42";
  let reRegex = /^(\d+) \1 \1$/; 
  let result = reRegex.test(repeatNum)

// Use Capture Groups to Search and Replace
  let str = "one two three";
  let fixRegex = /(\w+)\s(\w+)\s(\w+)/; 
  let replaceText = "$3 $2 $1"; 
  let result = str.replace(fixRegex, replaceText);

// Remove Whitespace from Start and End
  let hello = "   Hello, World!  ";
  let wsRegex = /^\s+|\s+$/g; 
  let result = hello.replace(wsRegex, ""); 

// 22.12.2024
// Use the JavaScript Console to Check the Value of a Variable
  let a = 5;
  let b = 1;
  a++;
  console.log(a);
  let sumAB = a + b;
  console.log(sumAB);

// 26.02.2024
// Understanding the Differences between the freeCodeCamp and Browser Console
  let output = "Get this to show once in the freeCodeCamp console and not at all in the browser console";
  console.log(output)
  console.clear()

// 18.11.2024
// Use typeof to Check the Type of a Variable
  let seven = 7;
  let three = "3";
  console.log(seven + three);
  console.log(typeof seven );
  console.log(typeof three );

// 19.11.2024
// Catch Misspelled Variable and Function Names
  let receivables = 10;
  let payables = 8;
  let netWorkingCapital  = receivables - payables;
  console.log(`Net working capital is: ${netWorkingCapital }`);

// Catch Unclosed Parentheses, Brackets, Braces and Quotes
  let myArray = [1, 2, 3];
  let arraySum = myArray.reduce((previous, current) =>  previous + current);
  console.log(`Sum of array values is: ${arraySum}`);

// Catch Mixed Usage of Single and Double Quotes
  let innerHtml = "<p>Click here to <a href=\"#Home\">return home</a></p>";
  console.log(innerHtml);

// Catch Use of Assignment Operator Instead of Equality Operator
  let x = 7;
  let y = 9;
  let result = "to come";
    if(x === y) {
    result = "Equal!";
  } else {
    result = "Not equal!";
  }
  console.log(result);

// Catch Missing Open and Closing Parenthesis After a Function Call
  function getNine() {
    let x = 6;
    let y = 3;
    return x + y;
  }
  let result = getNine();
  console.log(result);

// 20.11.2024
// Catch Missing Open and Closing Parenthesis After a Function Call
  function getNine() {
    let x = 6;
    let y = 3;
    return x + y;
  }
  let result = getNine();
  console.log(result);

// Catch Arguments Passed in the Wrong Order When Calling a Function
  function raiseToPower(b, e) {
    return Math.pow(b, e);
  }
  let base = 2;
  let exp = 3;
  let power = raiseToPower(base, exp);
  console.log(power);

// Catch Off By One Errors When Using Indexing
  function countToFive() {
    let firstFive = "12345";
    let len = firstFive.length;
    // Only change code below this line
    for (let i = 0; i <= len-1; i++) {
    // Only change code above this line
      console.log(firstFive[i]);
    }
  }
  countToFive();

// Use Caution When Reinitializing Variables Inside a Loop
function zeroArray(m, n) {
  // Creates a 2-D array with m rows and n columns of zeroes
    let newArray = [];
     for (let i = 0; i < m; i++) {
      // Adds the m-th row into newArray
      let row = [];
      for (let j = 0; j < n; j++) {
        // Pushes n zeroes into the current row to create the columns
        row.push(0);
      }
      // Pushes the current row, which now has n zeroes in it, to the array
      newArray.push(row);
    }
    return newArray;
  }
  let matrix = zeroArray(3, 2);
  console.log(matrix);

// Prevent Infinite Loops with a Valid Terminal Condition
  function myFunc() {
  for (let i = 1; i <= 4; i += 2) {
    console.log("Still going!");
  }
}

// 21.11.2024
// Use an Array to Store a Collection of Data
  let yourArray= ['one', 2, 'three', true,  undefined];

// Access an Array's Contents Using Bracket Notation
  let myArray = ["a", "o", "c", "d"];
  console.log(myArray);

// Add Items to an Array with push() and unshift()
  function mixedNumbers(arr) {
   arr.unshift('I', 2, 'three');
  arr.push(7, 'VIII', 9)
      return arr;
  }
    console.log(mixedNumbers(['IV', 5, 'six']));

// Remove Items from an Array with pop() and shift()
  function popShift(arr) {
    let popped = arr.pop(); 
    let shifted = arr.shift(); 
    return [shifted, popped];
  }
    console.log(popShift(['challenge', 'is', 'not', 'complete']));

// Remove Items Using splice()
  const arr = [2, 4, 5, 1, 7, 5, 2, 1];
  arr.splice(1,4)
  console.log(arr);

// 22.11.2024
// Add Items Using splice()
  function htmlColorNames(arr) {
     arr.splice(0,2,'DarkSalmon', 'BlanchedAlmond')
       return arr;
  }
    console.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));

// Copy Array Items Using slice()
  function forecast(arr) {
       arr = arr.slice(2,4)
    return arr;
  }
    console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));

// Copy an Array with the Spread Operator
  function copyMachine(arr, num) {
    let newArr = [];
    while (num >= 1) {
   newArr.push([...arr])
      num--;
    }
    return newArr;
  }
  console.log(copyMachine([true, false, true], 2));

// 25.11.2024
// Combine Arrays with the Spread Operator
  function spreadOut() {
    let fragment = ['to', 'code'];
    let sentence = ["learning", ...fragment, "is", "fun"]; 
    return sentence;
  }
  console.log(spreadOut());

// Check For The Presence of an Element With indexOf()
  function quickCheck(arr, elem) {
   return arr.indexOf(elem) !== -1
   }
  console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));

// Iterate Through All an Array's Items Using For Loops
  function filteredArray(arr, elem) {
    let newArr = [];
   for (let i = 0; i < arr.length; i++) {
     if (arr[i].indexOf(elem) == -1) {
        newArr.push(arr[i]);
      }
    }
    return newArr;
  }
  console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));

// Create complex multi-dimensional arrays
  let myNestedArray = [
 'level 1',                   /* myNestedArray[0]             */
  ['level 2'],	               /* myNestedArray[1][0]          */
  [['level 3','deep']],	       /* myNestedArray[2][0][0]       */
  [[['level 4','deeper']]],    /* myNestedArray[3][0][0][0]    */
  [[[['level 5','deepest']]]]  /* myNestedArray[4][0][0][0][0] */
];

// Add Key-Value Pairs to JavaScript Objects
    const foods = {
    apples: 25,
    oranges: 32,
    plums: 28
  };
  foods.bananas = 13;
  foods.grapes = 35;
  foods.strawberries  = 27;
  console.log(foods);

// 26.11.2024
// Modify an Object Nested Within an Object
  let userActivity = {
    id: 23894201352,
    date: 'January 1, 2017',
    data: {
      totalUsers: 51,
      online: 42
    }
  };
  userActivity.data.online = 45
  console.log(userActivity);

// Access Property Names with Bracket Notation
  let foods = {
    apples: 25,
    oranges: 32,
    plums: 28,
    bananas: 13,
    grapes: 35,
    strawberries: 27
  };
    function checkInventory(scannedItem) {
    return foods[scannedItem];
  }
  console.log(checkInventory("apples"));

// 28.11.2024
// Use the delete Keyword to Remove Object Properties
  let foods = {
    apples: 25,
    oranges: 32,
    plums: 28,
    bananas: 13,
    grapes: 35,
    strawberries: 27
  };
  delete foods.oranges
  delete foods.plums
  delete foods.strawberries 
  console.log(foods);

// Check if an Object has a Property
  let users = {
    Alan: {
      age: 27,
      online: true
    },
    Jeff: {
      age: 32,
      online: true
    },
    Sarah: {
      age: 48,
      online: true
    },
    Ryan: {
      age: 19,
      online: true
    }
  };
  
  function isEveryoneHere(userObj) {
    return ["Alan", "Jeff", "Sarah", "Ryan"].every(name =>
      userObj.hasOwnProperty(name)
    );
  }
  
  console.log(isEveryoneHere(users));

// Iterate Through the Keys of an Object with a for...in Statement
  const users = {
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: false
  }
}

function countOnline(allUsers) {
   let result = 0;
  for (let user in allUsers) {
    if (allUsers[user].online === true) {
      result++;
    }
  }
  return result;
}

console.log(countOnline(users));

// 29.11.2024
// Generate an Array of All Object Keys with Object.keys()
  let users = {
    Alan: {
      age: 27,
      online: false
    },
    Jeff: {
      age: 32,
      online: true
    },
    Sarah: {
      age: 48,
      online: false
    },
    Ryan: {
      age: 19,
      online: true
    }
  };
  
  function getArrayOfUsers(obj) {
  return Object.keys(obj)
  }
  
  console.log(getArrayOfUsers(users));

// Modify an Array Stored in an Object
  let user = {
    name: 'Kenneth',
    age: 28,
    data: {
      username: 'kennethCodesAllDay',
      joinDate: 'March 26, 2016',
      organization: 'freeCodeCamp',
      friends: [
        'Sam',
        'Kira',
        'Tomo'
      ],
      location: {
        city: 'San Francisco',
        state: 'CA',
        country: 'USA'
      }
    }
  };
  
  function addFriend(userObj, friend) {
    userObj.data.friends.push(friend)
    return userObj.data.friends
   }
  console.log(addFriend(user, 'Pete'));

// 02.12.2024
// Convert Celsius to Fahrenheit
  function convertCtoF(celsius) {
    let fahrenheit = (celsius * 9/5)+32;
    return fahrenheit;
  }
    convertCtoF(30);

// Reverse a String
  function reverseString(str) {
    return str.split("").reverse().join("");;
  }
  
  reverseString("hello");

// Factorialize a Number
  function factorialize(num) {
    if (num <= 0) {
      return 1;
    }
    return num * factorialize(num - 1);
  }
  
  factorialize(5);

// Find the Longest Word in a String
  function findLongestWordLength(str) {
    return str
      .split(' ')
      .reduce((longest, word) => Math.max(longest, word.length), 0);
  }
  
  findLongestWordLength("The quick brown fox jumped over the lazy dog");

// Return Largest Numbers in Arrays
  function largestOfFour(arr) {
   const results = [];
    for (let i = 0; i < arr.length; i++) {
      let largestNumber = arr[i][0];
      for (let j = 1; j < arr[i].length; j++) {
        if (arr[i][j] > largestNumber) {
          largestNumber = arr[i][j];
        }
      }
      results[i] = largestNumber;
    }
  
    return results;
  }
  
  largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

// 03.12.2024
// Confirm the Ending
  function confirmEnding(str, target) {
  return str.endsWith(target);
}
confirmEnding("Bastian", "n");

OR

function confirmEnding(str, target) {
  return str.slice(str.length - target.length) === target;
}
confirmEnding("Bastian", "n");

// 05.12.2024
// Repeat a String Repeat a String
function repeatStringNumTimes(str, num) {
   let accumulatedStr = "";

  for (let i = 0; i < num; i++) {
    accumulatedStr += str;
  }
  return accumulatedStr;
}

repeatStringNumTimes("abc", 3);

// Truncate a String
  function truncateString(str, num) {
      if (str.length > num) {
      return str.slice(0, num) + "...";
    } else {
      return str;
    }
  }
  
  truncateString("A-tisket a-tasket A green and yellow basket", 8);

// Finders Keepers
  function findElement(arr, func) {
     return arr.find(func);
  }
  findElement([1, 2, 3, 4], num => num % 2 === 0);

// 13.02.2025
// Boo who
   function booWho(bool) {
    return typeof bool === "boolean";
   }
   booWho(null);

// Title Case a Sentence
   function titleCase(str) {
     return str
       .toLowerCase()
       .split(" ")
       .map(val => val.replace(val.charAt(0), val.charAt(0).toUpperCase()))
       .join(" ");
   }
   
   titleCase("I'm a little tea pot");
